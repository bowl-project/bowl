
(- A helper function for the 'factorial' function which takes 
 - an additional accumulator in order to work tail-recursive
 -)
define factorial-helper (- ... acc n -> ... acc -)
    dup 0 <= 
    [ drop ]
    [ dup rot mul swap 1 sub factorial-helper ]
    rot if
;

(- Calculates the factorial number of 'n' -)
define factorial (- ... n -> ... n -)
    1 swap factorial-helper
;

(- Alias for the function 'factorial' -)
define ! (- ... n -> ... n -) factorial ;

(- A helper function for the 'fibonacci' function which takes 
 - two additional accumulators in order to work tail-recursive
 -)
define fibonacci-helper (- ... prev next n -> ... n -)
    dup 0 <=
    [ drop drop ]
    [ 1 sub rot rot dup rot add rot fibonacci-helper ]
    rot if
;

(- Calculates the fibonacci number of 'n' -)
define fibonacci (- ... n -> ... n -)
    0 1 rot fibonacci-helper
;

(- Decrements the provided argument by one -)
define decrement (- ... n -> ... n -) 1 sub ;

(- Increments the provided argument by one -)
define increment (- ... n -> ... n -) 1 add ;

(- Alias for the primitive operation 'add' -)
define + (- ... a b -> ... c -) add ;

(- Alias for the primitive operation 'sub' -)
define - (- ... a b -> ... c -) sub ;

(- Alias for the primitive operation 'mul' -)
define * (- ... a b -> ... c -) mul ;

(- Alias for the primitive operation 'div' -)
define / (- ... a b -> ... c -) div ;

(- Alias for the primitive operation 'rem' -)
define % (- ... a b -> ... c -) rem ;

(- Alias for the primitive operation 'equals' -)
define = (- ... a b -> ... c -) equals ;
