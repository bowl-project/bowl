invoke rot
quote
"invoke swap 13 split swap drop dup head swap tail rot rot prepend continue" tokens reverse
put
rot 13 split swap drop rot
continue

invoke rot
get-dictionary
"invoke swap 14 split swap drop swap rot dup rot swap prepend rot swap continue" tokens reverse
put
rot 13 split swap drop rot
continue

invoke rot
set-dictionary
"invoke swap 15 split swap drop rot drop swap 1 split swap head rot rot continue" tokens reverse
put
rot 13 split swap drop rot
continue

get-dictionary
println
"print \"\n\" print" tokens reverse
put
set-dictionary

get-dictionary
apply
"invoke swap 15 split swap drop swap dup head swap tail rot rot prepend swap continue" tokens reverse
put
set-dictionary

get-dictionary
if
"invoke swap 24 split swap drop swap 3 split swap dup head 1 equals swap tail swap split swap drop head rot concatenate swap continue" tokens reverse
put
set-dictionary

get-dictionary
get-datastack
"invoke swap 9 split swap drop swap dup prepend continue" tokens reverse
put
set-dictionary

get-dictionary
print-datastack
"get-datastack show println" tokens reverse
put
set-dictionary

get-dictionary
parse-lookup-table
nil empty-map 
quote define quote parse-define put
quote (- quote parse-comment-skip put
quote [ quote parse-list put
prepend put
set-dictionary

get-dictionary
parse
"dup head parse-lookup-table swap quote parse-next get-or-else apply" tokens reverse
put
set-dictionary

get-dictionary
parse-next
"1 split swap head" tokens reverse
put
set-dictionary

get-dictionary
parse-list-accumulate
"swap parse-comment-optional dup head quote ] equals" tokens
"rot if" tokens 
"parse rot swap prepend parse-list-accumulate" tokens prepend
"tail swap reverse" tokens prepend
concatenate
reverse
put
set-dictionary

get-dictionary
parse-list
"tail nil parse-list-accumulate" tokens reverse
put
set-dictionary

get-dictionary
[
"invoke swap 12 split swap drop nil prepend parse-list rot swap prepend continue" tokens reverse
put
set-dictionary

get-dictionary
parse-until-semicolon
"swap parse-comment-optional dup head quote ; equals" tokens
"rot if" tokens
"parse rot swap prepend parse-until-semicolon" tokens prepend
"tail swap reverse" tokens prepend
concatenate
reverse
put
set-dictionary


get-dictionary
parse-define
"tail nil parse-until-semicolon 1 split swap nil quote get-dictionary prepend quote quote prepend swap head prepend swap reverse prepend quote put prepend quote set-dictionary prepend reverse" tokens reverse
put
set-dictionary

get-dictionary
define
"invoke swap 12 split swap drop nil prepend parse-define swap concatenate swap continue" tokens reverse 
put
set-dictionary

get-dictionary
parse-comment-until-end
"dup head quote (- equals" tokens
"rot if" tokens
"dup head quote -) equals" tokens 
"rot if" tokens
"tail parse-comment-until-end" tokens prepend
"tail" tokens prepend
concatenate
prepend
"parse-comment parse-comment-until-end" tokens prepend
concatenate
reverse
put
set-dictionary

get-dictionary
parse-comment
"tail parse-comment-until-end" tokens reverse
put
set-dictionary

get-dictionary
parse-comment-skip
"parse-comment parse" tokens reverse
put
set-dictionary

get-dictionary
parse-comment-optional
"dup head quote (- equals" tokens
"rot if" tokens
"" tokens prepend 
"parse-comment" tokens prepend
concatenate
reverse
put
set-dictionary

get-dictionary
(-
"invoke swap 11 split swap drop quote (- prepend parse-comment swap continue" tokens reverse
put
set-dictionary

(- standard library for lime -)

(- Drops the first n elements of the list -)
define drop-n (- ... xs n -> ... xs -)
    split swap drop
;

(- Gets the current callstack (after this command) -)
define get-callstack (- ... -> ... callstack -)
    invoke swap 8 drop-n dup rot swap prepend continue
;

(- Sets the callstack to specified value -)
define set-callstack (- ... callstack -> ... -)
    invoke swap drop 1 split swap head swap continue
;

(- Calls the program at the top of the datastack -)
define call (- ... program -> ... -)
    get-callstack 4 drop-n concatenate set-callstack
;

(- Sets the datastack to the provided value -)
define set-datastack (- ... datastack -> datastack -)
    invoke swap 6 drop-n swap head continue
;

(- Clears the datastack -)
define clear (- ... ->  -)
    nil set-datastack
;

define on-unknown-word
    dup show nil swap prepend "-v" prepend "command" execute "" equals
    [ (- do nothing -) ]
    [ show get-callstack 8 drop-n nil parse-until-semicolon rot execute swap set-callstack ]
    rot if
;

define main
    (- --- print prompt --- -)
    get-directory print
    "$ " print 
    (- --- fetch, parse and call next line --- -)
    input tokens call
    (- --- print datastack and call recursively --- -)
    print-datastack
    main
;

main
