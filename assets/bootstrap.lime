milliseconds

"rot quote get-dictionary" tokens
"put rot rot continue" tokens
"invoke" tokens 
"rot dup rot swap prepend rot swap continue" tokens prepend
reverse prepend
concatenate
invoke

"rot quote set-dictionary" tokens
"put rot rot continue" tokens
"invoke" tokens 
"rot drop dup head rot rot tail continue" tokens prepend
reverse prepend
concatenate
invoke

get-dictionary
quote enter-definition
"get-dictionary rot rot reverse put set-dictionary" tokens reverse
put
set-dictionary

quote \
nil quote quote prepend
enter-definition

\ println
"print \"\\n\" print" tokens
enter-definition

\ get-callstack
"invoke" tokens
"swap dup rot swap prepend continue" tokens prepend
enter-definition

\ set-callstack
"invoke" tokens
"swap drop dup head swap tail continue" tokens prepend
enter-definition

\ get-datastack
"invoke" tokens
"dup prepend continue" tokens prepend
enter-definition

\ set-datastack
"invoke" tokens
"head continue" tokens prepend
enter-definition

\ apply
"invoke" tokens
"dup head rot swap prepend swap tail continue" tokens prepend
enter-definition

\ call
"invoke" tokens
"dup head rot concatenate swap tail continue" tokens prepend
enter-definition

\ parse-lookup-table
nil empty-map
\ define \ parse-define put
\ (- \ parse-comment-skip put
\ [ \ parse-list put
prepend
enter-definition

\ parse
"dup head parse-lookup-table swap quote parse-next get-or-else apply" tokens
enter-definition

\ parse-next
"1 split swap head" tokens
enter-definition

\ parse-list-accumulate
"swap parse-comment-optional dup head quote ] equals" tokens
"rot if" tokens 
"parse rot swap prepend parse-list-accumulate" tokens prepend
"tail swap reverse" tokens prepend
concatenate
enter-definition

\ parse-list
"tail nil parse-list-accumulate" tokens
enter-definition

\ [
"invoke" tokens
"swap nil prepend parse-list rot swap prepend continue" tokens prepend
enter-definition

\ parse-until-semicolon
"swap parse-comment-optional dup head quote ; equals" tokens
"rot if" tokens
"parse rot swap prepend parse-until-semicolon" tokens prepend
"tail swap reverse" tokens prepend
concatenate
enter-definition

\ parse-define
"tail nil parse-until-semicolon 1 split swap nil quote get-dictionary prepend quote quote prepend swap head prepend swap reverse prepend quote put prepend quote set-dictionary prepend reverse" tokens
enter-definition

\ define
"invoke" tokens
"swap nil prepend parse-define swap concatenate swap continue" tokens prepend
enter-definition

\ parse-comment-until-end
"dup head quote (- equals" tokens
"rot if" tokens
"dup head quote -) equals" tokens 
"rot if" tokens
"tail parse-comment-until-end" tokens prepend
"tail" tokens prepend
concatenate
prepend
"parse-comment parse-comment-until-end" tokens prepend
concatenate
enter-definition

\ parse-comment
"tail parse-comment-until-end" tokens
enter-definition

\ parse-comment-skip
"parse-comment parse" tokens
enter-definition

\ parse-comment-optional
"dup head quote (- equals" tokens
"rot if" tokens
"" tokens prepend 
"parse-comment" tokens prepend
concatenate
enter-definition

\ (-
"invoke" tokens
"swap quote (- prepend parse-comment swap continue" tokens prepend
enter-definition

(- standard library for lime -)

(- Drops the first n elements of the list -)
define drop-n (- ... xs n -> ... xs -)
    split swap drop
;

(- Clears the datastack -)
define clear (- ... ->  -)
    nil set-datastack
;

(- Includes the file denoted by the specified path -)
define include (- ... path -> ... -)
    [ dup head read tokens rot concatenate swap tail continue ] invoke
;

define on-unknown-word
    dup show nil swap prepend "-v" prepend "command" execute "" equals
    [ (- do nothing -) ]
    [ show get-callstack 8 drop-n nil parse-until-semicolon rot execute swap set-callstack ]
    rot if
;

define main
    (- --- print prompt --- -)
    get-directory print
    "$ " print 
    (- --- fetch, parse and call next line --- -)
    input tokens call
    (- --- print datastack and call recursively --- -)
    get-datastack show println
    main
;

(- include standard library -)
"assets/math.lime" include

(- show the welcome message -)
"
Welcome to the interactive shell
 __    ____  __  __  ____ 
(  )  (_  _)(  \\/  )( ___)
 )(__  _)(_  )    (  )__) 
(____)(____)(_/\\/\\_)(____)

Version 0.0.1-SNAPSHOT
" println

"The standard library took " print
milliseconds swap sub dup 1 rem sub show print
"ms to load" println

(- start the interactive shell -)
main
